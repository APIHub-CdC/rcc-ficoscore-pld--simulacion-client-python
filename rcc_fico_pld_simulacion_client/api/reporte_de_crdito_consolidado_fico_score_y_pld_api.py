# coding: utf-8



from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rcc_fico_pld_simulacion_client.api_client import ApiClient


class ReporteDeCrditoConsolidadoFICOScoreYPLDApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_consultas(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene las consultas del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultas(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Consultas
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consultas_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consultas_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_consultas_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene las consultas del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consultas_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Consultas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consultas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_consultas`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_consultas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/consultas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Consultas',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_creditos(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los créditos del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_creditos(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Creditos
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_creditos_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_creditos_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_creditos_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los créditos del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_creditos_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Creditos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_creditos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_creditos`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_creditos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/creditos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Creditos',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_domicilios(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los domiclios del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domicilios(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: DomiciliosRespuesta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domicilios_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_domicilios_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_domicilios_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los domiclios del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domicilios_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: DomiciliosRespuesta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domicilios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_domicilios`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_domicilios`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/domicilios', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomiciliosRespuesta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_empleos(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los empleos del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_empleos(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Empleos
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_empleos_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_empleos_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_empleos_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los empleos del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_empleos_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Empleos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_empleos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_empleos`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_empleos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/empleos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empleos',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mensajes(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los mensajes del reporte de crédito.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mensajes(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta: (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Mensajes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mensajes_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mensajes_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_mensajes_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los mensajes del reporte de crédito.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mensajes_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta: (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Mensajes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mensajes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_mensajes`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_mensajes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/mensajes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mensajes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reporte(self, x_api_key, request, **kwargs):  # noqa: E501
        """Obtiene el reporte de crédito.  # noqa: E501

        En caso de que el reporte se consuma de forma segmentada, éste retornará un header llamado **x-cache-remaining**, el cual indicará el tiempo restante en cache; formato en segundos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reporte(x_api_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :param PersonaPeticion request: <p>Ejemplos para generar diferentes respuestas:<br><ul><li><b>Status Code 200 Score 720</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYDOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1965-08-09\", <br>\"RFC\": \"SEPJ650809JG1\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 58\", <br>\"coloniaPoblacion\": \"MONTEVIDEO\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07730\"<br>}<br>}<br></li><li><b>Status Code 200 Score 650</b> <br>{<br>\"apellidoPaterno\": \"CINCUENTAYNUEVE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1945-02-12\", <br>\"RFC\": \"CIPJ450212KG4\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 168\", <br>\"coloniaPoblacion\": \"CHALMA DE GUADALUPE\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07210\"<br>}<br>}<br></li><li><b>Status Code 200 Score 735</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYSIETE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1945-08-07\", <br>\"RFC\": \"SEPJ4508071Y8\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 746\", <br>\"coloniaPoblacion\": \"PUEBLO LA CANDELARIA\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04380\"<br>}<br>}<br></li><li><b>Status Code 200 Score 550</b> <br>{<br>\"apellidoPaterno\": \"DIEZYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1970-08-25\", <br>\"RFC\": \"DIPJ700825549\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 975\", <br>\"coloniaPoblacion\": \"AVANTE\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04460\"<br>}<br>}<br></li><li><b>Status Code 200 Score 520</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYCINCO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1974-02-11\", <br>\"RFC\": \"SEPJ740211TL7\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 285\", <br>\"coloniaPoblacion\": \"ALDANA\", <br>\"delegacionMunicipio\": \"AZCAPOTZALCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"02910\"<br>}<br>}<br></li><li><b>Status Code 200 Score 640</b> <br>{<br>\"apellidoPaterno\": \"DIEZ\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1969-01-20\", <br>\"RFC\": \"DIPJ690120I50\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 998\", <br>\"coloniaPoblacion\": \"PARAJE TLALATLACO\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16247\"<br>}<br>}<br></li><li><b>Status Code 200 Score 500</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYOCHO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1988-09-09\", <br>\"RFC\": \"TEPJ880909AKA\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1646\", <br>\"coloniaPoblacion\": \"JUSTO SIERRA\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09460\"<br>}<br>}<br></li><li><b>Status Code 200 Score 525</b> <br>{<br>\"apellidoPaterno\": \"CUARENTAYCUATRO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1997-10-19\", <br>\"RFC\": \"CUPJ971019FM9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 966\", <br>\"coloniaPoblacion\": \"SANTA LUCÍA CHANTEPEC\", <br>\"delegacionMunicipio\": \"ALVARO OBREGON\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"01509\"<br>}<br>}<br></li><li><b>Status Code 200 Score 610</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1975-10-02\", <br>\"RFC\": \"SEPJ751002UK4\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 974\", <br>\"coloniaPoblacion\": \"GRANJAS ESMERALDA\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09810\"<br>}<br>}<br></li><li><b>Status Code 200 Score 570</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYDOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1986-05-28\", <br>\"RFC\": \"TEPJ860528278\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1304\", <br>\"coloniaPoblacion\": \"SAN LUCAS XOCHIMANCA\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16300\"<br>}<br>}<br></li><li><b>Status Code 200 Score 660</b> <br>{<br>\"apellidoPaterno\": \"CUARENTAYOCHO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1966-04-04\", <br>\"RFC\": \"CUPJ6604046Y9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 180\", <br>\"coloniaPoblacion\": \"BARRIO SAN DIEGO\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16080\"<br>}<br>}<br></li><li><b>Status Code 200 Score 380</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYSIETE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1967-01-29\", <br>\"RFC\": \"TEPJ670129E48\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 65\", <br>\"coloniaPoblacion\": \"EL PARQUE DE COYOACÁN\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04899\"<br>}<br>}<br></li><li><b>Status Code 200 Score 405</b> <br>{<br>\"apellidoPaterno\": \"EÑE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1969-12-11\", <br>\"RFC\": \"EEPJ691211166\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1653\", <br>\"coloniaPoblacion\": \"APATLACO\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09430\"<br>}<br>}<br></li><li><b>Status Code 200 Score 510</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1949-10-04\", <br>\"RFC\": \"TEPJ491004CB9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 304\", <br>\"coloniaPoblacion\": \"CARLOS ZAPATA VELA\", <br>\"delegacionMunicipio\": \"IZTACALCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"08040\"<br>}<br>}<br></li><li><b>Status Code 200 Score 605</b> <br>{<br>\"apellidoPaterno\": \"ONCE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1994-07-17\", <br>\"RFC\": \"OEPJ940717858\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 160\", <br>\"coloniaPoblacion\": \"TEPEYAC INSURGENTES\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07020\"<br>}<br>}<br></li><li><b>Status Code 200 Score 535</b> <br>{<br>\"apellidoPaterno\": \"CINCUENTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1955-07-19\", <br>\"RFC\": \"CIPJ550719EZ3\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 600\", <br>\"coloniaPoblacion\": \"LA ASUNCIÓN\", <br>\"delegacionMunicipio\": \"TLAHUAC\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"13000\"<br>}<br>}<br></li><li><b>Status Code 200 Score 470</b> <br>{<br>\"apellidoPaterno\": \"CIENTOUNO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1964-10-06\", <br>\"RFC\": \"CIPJ641006H3A\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 881\", <br>\"coloniaPoblacion\": \"PENSADOR MEXICANO\", <br>\"delegacionMunicipio\": \"VENUSTIANO CARRANZA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"15510\"<br>}<br>}<br></li><li><b>Status Code 200 Score 600</b> <br>{<br>\"apellidoPaterno\": \"DOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1964-02-04\", <br>\"RFC\": \"DOPJ6402046I9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1349\", <br>\"coloniaPoblacion\": \"SANTA CECILIA\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04930\"<br>}<br>}<br></li><li><b>Status Code 200 Score 490</b> <br>{<br>\"apellidoPaterno\": \"SESENTA\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1944-01-04\", <br>\"RFC\": \"SEPJ440104K91\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 772\", <br>\"coloniaPoblacion\": \"JOSÉ VASCONCELOS CALDERÓN\", <br>\"delegacionMunicipio\": \"AGUASCALIENTES\", <br>\"ciudad\": \"AGUASCALIENTES\", <br>\"estado\": \"AGS\", <br>\"CP\": \"20200\"<br>}<br>}<br></li><li><b>Status Code 204</b> Colocar \"JOHANN\" en el campo \"primerNombre\" o \"WOLFGANG\" en el campo \"apellidoPaterno\"</li><li><b>Status Code 400</b> No especificar alguno de los campos requeridos como \"primerNombre\", \"apellidoPaterno\", \"fechaNacimiento\", \"direccion\", \"codigoPostal\", \"colonia\", \"municipio\", \"ciudad\", o \"estado\" </li><li><b>Status Code 401</b> Colocar \"FRIEDRICH\" en el campo \"primerNombre\" o colocar \"NIETZSCHE\" en el campo \"segundoNombre\"</li><li><b>Status Code 403</b> Colocar \"COAH\" en el campo \"estado\" </li><li><b>Status Code 429</b> Colocar \"QROO\" en el campo \"estado\" </li><li><b>Status Code 500</b> Colocar \"DANIEL\" en el campo \"primerNombre\" o \"TAB\" en el campo \"estado\" </li><li><b>Status Code 503</b> Colocar \"LOUIS PASTEUR\" en el campo \"primerNombre\" </li></ul></p> (required)
        :param str x_full_report: Indicador si se quiere obtener el reporte en una sola petición true; en caso de requerirse de manera segmentada será false
        :return: Respuesta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reporte_with_http_info(x_api_key, request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reporte_with_http_info(x_api_key, request, **kwargs)  # noqa: E501
            return data

    def get_reporte_with_http_info(self, x_api_key, request, **kwargs):  # noqa: E501
        """Obtiene el reporte de crédito.  # noqa: E501

        En caso de que el reporte se consuma de forma segmentada, éste retornará un header llamado **x-cache-remaining**, el cual indicará el tiempo restante en cache; formato en segundos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reporte_with_http_info(x_api_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :param PersonaPeticion request: <p>Ejemplos para generar diferentes respuestas:<br><ul><li><b>Status Code 200 Score 720</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYDOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1965-08-09\", <br>\"RFC\": \"SEPJ650809JG1\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 58\", <br>\"coloniaPoblacion\": \"MONTEVIDEO\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07730\"<br>}<br>}<br></li><li><b>Status Code 200 Score 650</b> <br>{<br>\"apellidoPaterno\": \"CINCUENTAYNUEVE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1945-02-12\", <br>\"RFC\": \"CIPJ450212KG4\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 168\", <br>\"coloniaPoblacion\": \"CHALMA DE GUADALUPE\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07210\"<br>}<br>}<br></li><li><b>Status Code 200 Score 735</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYSIETE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1945-08-07\", <br>\"RFC\": \"SEPJ4508071Y8\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 746\", <br>\"coloniaPoblacion\": \"PUEBLO LA CANDELARIA\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04380\"<br>}<br>}<br></li><li><b>Status Code 200 Score 550</b> <br>{<br>\"apellidoPaterno\": \"DIEZYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1970-08-25\", <br>\"RFC\": \"DIPJ700825549\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 975\", <br>\"coloniaPoblacion\": \"AVANTE\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04460\"<br>}<br>}<br></li><li><b>Status Code 200 Score 520</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYCINCO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1974-02-11\", <br>\"RFC\": \"SEPJ740211TL7\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 285\", <br>\"coloniaPoblacion\": \"ALDANA\", <br>\"delegacionMunicipio\": \"AZCAPOTZALCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"02910\"<br>}<br>}<br></li><li><b>Status Code 200 Score 640</b> <br>{<br>\"apellidoPaterno\": \"DIEZ\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1969-01-20\", <br>\"RFC\": \"DIPJ690120I50\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 998\", <br>\"coloniaPoblacion\": \"PARAJE TLALATLACO\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16247\"<br>}<br>}<br></li><li><b>Status Code 200 Score 500</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYOCHO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1988-09-09\", <br>\"RFC\": \"TEPJ880909AKA\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1646\", <br>\"coloniaPoblacion\": \"JUSTO SIERRA\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09460\"<br>}<br>}<br></li><li><b>Status Code 200 Score 525</b> <br>{<br>\"apellidoPaterno\": \"CUARENTAYCUATRO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1997-10-19\", <br>\"RFC\": \"CUPJ971019FM9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 966\", <br>\"coloniaPoblacion\": \"SANTA LUCÍA CHANTEPEC\", <br>\"delegacionMunicipio\": \"ALVARO OBREGON\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"01509\"<br>}<br>}<br></li><li><b>Status Code 200 Score 610</b> <br>{<br>\"apellidoPaterno\": \"SESENTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1975-10-02\", <br>\"RFC\": \"SEPJ751002UK4\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 974\", <br>\"coloniaPoblacion\": \"GRANJAS ESMERALDA\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09810\"<br>}<br>}<br></li><li><b>Status Code 200 Score 570</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYDOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1986-05-28\", <br>\"RFC\": \"TEPJ860528278\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1304\", <br>\"coloniaPoblacion\": \"SAN LUCAS XOCHIMANCA\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16300\"<br>}<br>}<br></li><li><b>Status Code 200 Score 660</b> <br>{<br>\"apellidoPaterno\": \"CUARENTAYOCHO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1966-04-04\", <br>\"RFC\": \"CUPJ6604046Y9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 180\", <br>\"coloniaPoblacion\": \"BARRIO SAN DIEGO\", <br>\"delegacionMunicipio\": \"XOCHIMILCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"16080\"<br>}<br>}<br></li><li><b>Status Code 200 Score 380</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYSIETE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1967-01-29\", <br>\"RFC\": \"TEPJ670129E48\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 65\", <br>\"coloniaPoblacion\": \"EL PARQUE DE COYOACÁN\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04899\"<br>}<br>}<br></li><li><b>Status Code 200 Score 405</b> <br>{<br>\"apellidoPaterno\": \"EÑE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1969-12-11\", <br>\"RFC\": \"EEPJ691211166\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1653\", <br>\"coloniaPoblacion\": \"APATLACO\", <br>\"delegacionMunicipio\": \"IZTAPALAPA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"09430\"<br>}<br>}<br></li><li><b>Status Code 200 Score 510</b> <br>{<br>\"apellidoPaterno\": \"TREINTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1949-10-04\", <br>\"RFC\": \"TEPJ491004CB9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 304\", <br>\"coloniaPoblacion\": \"CARLOS ZAPATA VELA\", <br>\"delegacionMunicipio\": \"IZTACALCO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"08040\"<br>}<br>}<br></li><li><b>Status Code 200 Score 605</b> <br>{<br>\"apellidoPaterno\": \"ONCE\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1994-07-17\", <br>\"RFC\": \"OEPJ940717858\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 160\", <br>\"coloniaPoblacion\": \"TEPEYAC INSURGENTES\", <br>\"delegacionMunicipio\": \"GUSTAVO A MADERO\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"07020\"<br>}<br>}<br></li><li><b>Status Code 200 Score 535</b> <br>{<br>\"apellidoPaterno\": \"CINCUENTAYSEIS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1955-07-19\", <br>\"RFC\": \"CIPJ550719EZ3\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 600\", <br>\"coloniaPoblacion\": \"LA ASUNCIÓN\", <br>\"delegacionMunicipio\": \"TLAHUAC\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"13000\"<br>}<br>}<br></li><li><b>Status Code 200 Score 470</b> <br>{<br>\"apellidoPaterno\": \"CIENTOUNO\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1964-10-06\", <br>\"RFC\": \"CIPJ641006H3A\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 881\", <br>\"coloniaPoblacion\": \"PENSADOR MEXICANO\", <br>\"delegacionMunicipio\": \"VENUSTIANO CARRANZA\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"15510\"<br>}<br>}<br></li><li><b>Status Code 200 Score 600</b> <br>{<br>\"apellidoPaterno\": \"DOS\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1964-02-04\", <br>\"RFC\": \"DOPJ6402046I9\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 1349\", <br>\"coloniaPoblacion\": \"SANTA CECILIA\", <br>\"delegacionMunicipio\": \"COYOACAN\", <br>\"ciudad\": \"CIUDAD DE MÉXICO\", <br>\"estado\": \"CDMX\", <br>\"CP\": \"04930\"<br>}<br>}<br></li><li><b>Status Code 200 Score 490</b> <br>{<br>\"apellidoPaterno\": \"SESENTA\", <br>\"apellidoMaterno\": \"PRUEBA\", <br>\"primerNombre\": \"JUAN\", <br>\"fechaNacimiento\": \"1944-01-04\", <br>\"RFC\": \"SEPJ440104K91\", <br>\"nacionalidad\": \"MX\",<br>\"domicilio\": {<br>\"direccion\": \"PASADISO ENCONTRADO 772\", <br>\"coloniaPoblacion\": \"JOSÉ VASCONCELOS CALDERÓN\", <br>\"delegacionMunicipio\": \"AGUASCALIENTES\", <br>\"ciudad\": \"AGUASCALIENTES\", <br>\"estado\": \"AGS\", <br>\"CP\": \"20200\"<br>}<br>}<br></li><li><b>Status Code 204</b> Colocar \"JOHANN\" en el campo \"primerNombre\" o \"WOLFGANG\" en el campo \"apellidoPaterno\"</li><li><b>Status Code 400</b> No especificar alguno de los campos requeridos como \"primerNombre\", \"apellidoPaterno\", \"fechaNacimiento\", \"direccion\", \"codigoPostal\", \"colonia\", \"municipio\", \"ciudad\", o \"estado\" </li><li><b>Status Code 401</b> Colocar \"FRIEDRICH\" en el campo \"primerNombre\" o colocar \"NIETZSCHE\" en el campo \"segundoNombre\"</li><li><b>Status Code 403</b> Colocar \"COAH\" en el campo \"estado\" </li><li><b>Status Code 429</b> Colocar \"QROO\" en el campo \"estado\" </li><li><b>Status Code 500</b> Colocar \"DANIEL\" en el campo \"primerNombre\" o \"TAB\" en el campo \"estado\" </li><li><b>Status Code 503</b> Colocar \"LOUIS PASTEUR\" en el campo \"primerNombre\" </li></ul></p> (required)
        :param str x_full_report: Indicador si se quiere obtener el reporte en una sola petición true; en caso de requerirse de manera segmentada será false
        :return: Respuesta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'request', 'x_full_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reporte" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_reporte`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `get_reporte`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_full_report' in params:
            header_params['x-full-report'] = params['x_full_report']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Respuesta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scores(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los scores del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scores(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Scores
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scores_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scores_with_http_info(folio_consulta, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_scores_with_http_info(self, folio_consulta, x_api_key, **kwargs):  # noqa: E501
        """Obtiene los scores del reporte de crédito.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scores_with_http_info(folio_consulta, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folio_consulta:  (required)
        :param str x_api_key: ConsumerKey obtenido desde el portal de desarrolladores (required)
        :return: Scores
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folio_consulta', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folio_consulta' is set
        if self.api_client.client_side_validation and ('folio_consulta' not in params or
                                                       params['folio_consulta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folio_consulta` when calling `get_scores`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in params or
                                                       params['x_api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_scores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folio_consulta' in params:
            path_params['folioConsulta'] = params['folio_consulta']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rcc-ficoscore-pld/{folioConsulta}/scores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scores',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
